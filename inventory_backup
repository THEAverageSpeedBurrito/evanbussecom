--
-- PostgreSQL database dump
--

-- Dumped from database version 9.6.7
-- Dumped by pg_dump version 9.6.7

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: event_inventory; Type: TABLE; Schema: public; Owner: pi
--

CREATE TABLE event_inventory (
    id integer NOT NULL,
    event_id integer,
    item_id integer,
    quantity integer DEFAULT 0 NOT NULL,
    counted boolean DEFAULT true
);


ALTER TABLE event_inventory OWNER TO pi;

--
-- Name: event_inventory_id_seq; Type: SEQUENCE; Schema: public; Owner: pi
--

CREATE SEQUENCE event_inventory_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE event_inventory_id_seq OWNER TO pi;

--
-- Name: event_inventory_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: pi
--

ALTER SEQUENCE event_inventory_id_seq OWNED BY event_inventory.id;


--
-- Name: events; Type: TABLE; Schema: public; Owner: pi
--

CREATE TABLE events (
    id integer NOT NULL,
    name character varying(255) DEFAULT ''::character varying,
    recipient character varying(255),
    address character varying(255),
    city character varying(255),
    state character varying(255),
    zip integer DEFAULT 80302 NOT NULL,
    timeframe character varying(255) DEFAULT 'none'::character varying NOT NULL,
    website character varying(255) DEFAULT 'http://evanbusse.com/'::character varying,
    sharepoint character varying(255) DEFAULT 'https://circadence.sharepoint.com/_layouts/15/sharepoint.aspx'::character varying,
    notes text DEFAULT ''::text,
    shipped boolean DEFAULT false,
    tracking character varying(255) DEFAULT ''::character varying,
    returned boolean DEFAULT false
);


ALTER TABLE events OWNER TO pi;

--
-- Name: events_id_seq; Type: SEQUENCE; Schema: public; Owner: pi
--

CREATE SEQUENCE events_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE events_id_seq OWNER TO pi;

--
-- Name: events_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: pi
--

ALTER SEQUENCE events_id_seq OWNED BY events.id;


--
-- Name: expense_category; Type: TABLE; Schema: public; Owner: pi
--

CREATE TABLE expense_category (
    id integer NOT NULL,
    name character varying(255) DEFAULT 'MISC'::character varying NOT NULL
);


ALTER TABLE expense_category OWNER TO pi;

--
-- Name: expense_category_id_seq; Type: SEQUENCE; Schema: public; Owner: pi
--

CREATE SEQUENCE expense_category_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE expense_category_id_seq OWNER TO pi;

--
-- Name: expense_category_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: pi
--

ALTER SEQUENCE expense_category_id_seq OWNED BY expense_category.id;


--
-- Name: expenses; Type: TABLE; Schema: public; Owner: pi
--

CREATE TABLE expenses (
    id integer NOT NULL,
    name character varying(255) DEFAULT 'Unlabeled Expense'::character varying NOT NULL,
    total real DEFAULT '0'::real NOT NULL,
    category integer,
    user_id integer,
    event_id integer NOT NULL
);


ALTER TABLE expenses OWNER TO pi;

--
-- Name: expenses_id_seq; Type: SEQUENCE; Schema: public; Owner: pi
--

CREATE SEQUENCE expenses_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE expenses_id_seq OWNER TO pi;

--
-- Name: expenses_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: pi
--

ALTER SEQUENCE expenses_id_seq OWNED BY expenses.id;


--
-- Name: inventory_type; Type: TABLE; Schema: public; Owner: pi
--

CREATE TABLE inventory_type (
    id integer NOT NULL,
    label character varying(255)
);


ALTER TABLE inventory_type OWNER TO pi;

--
-- Name: inventory_type_id_seq; Type: SEQUENCE; Schema: public; Owner: pi
--

CREATE SEQUENCE inventory_type_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE inventory_type_id_seq OWNER TO pi;

--
-- Name: inventory_type_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: pi
--

ALTER SEQUENCE inventory_type_id_seq OWNED BY inventory_type.id;


--
-- Name: items; Type: TABLE; Schema: public; Owner: pi
--

CREATE TABLE items (
    id integer NOT NULL,
    inv_type integer NOT NULL,
    name character varying(255),
    quantity_in integer DEFAULT 1 NOT NULL,
    quantity_out integer DEFAULT 0 NOT NULL,
    make character varying(255) DEFAULT 'undefined'::character varying,
    model character varying(255) DEFAULT 'undefined'::character varying,
    notes text DEFAULT ''::text NOT NULL,
    unit_cost real DEFAULT '0'::real NOT NULL
);


ALTER TABLE items OWNER TO pi;

--
-- Name: items_id_seq; Type: SEQUENCE; Schema: public; Owner: pi
--

CREATE SEQUENCE items_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE items_id_seq OWNER TO pi;

--
-- Name: items_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: pi
--

ALTER SEQUENCE items_id_seq OWNED BY items.id;


--
-- Name: knex_migrations; Type: TABLE; Schema: public; Owner: pi
--

CREATE TABLE knex_migrations (
    id integer NOT NULL,
    name character varying(255),
    batch integer,
    migration_time timestamp with time zone
);


ALTER TABLE knex_migrations OWNER TO pi;

--
-- Name: knex_migrations_id_seq; Type: SEQUENCE; Schema: public; Owner: pi
--

CREATE SEQUENCE knex_migrations_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE knex_migrations_id_seq OWNER TO pi;

--
-- Name: knex_migrations_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: pi
--

ALTER SEQUENCE knex_migrations_id_seq OWNED BY knex_migrations.id;


--
-- Name: knex_migrations_lock; Type: TABLE; Schema: public; Owner: pi
--

CREATE TABLE knex_migrations_lock (
    is_locked integer
);


ALTER TABLE knex_migrations_lock OWNER TO pi;

--
-- Name: user_events; Type: TABLE; Schema: public; Owner: pi
--

CREATE TABLE user_events (
    id integer NOT NULL,
    user_id integer,
    event_id integer
);


ALTER TABLE user_events OWNER TO pi;

--
-- Name: user_events_id_seq; Type: SEQUENCE; Schema: public; Owner: pi
--

CREATE SEQUENCE user_events_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE user_events_id_seq OWNER TO pi;

--
-- Name: user_events_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: pi
--

ALTER SEQUENCE user_events_id_seq OWNED BY user_events.id;


--
-- Name: user_groups; Type: TABLE; Schema: public; Owner: pi
--

CREATE TABLE user_groups (
    id integer NOT NULL,
    name character varying(255) NOT NULL
);


ALTER TABLE user_groups OWNER TO pi;

--
-- Name: user_groups_id_seq; Type: SEQUENCE; Schema: public; Owner: pi
--

CREATE SEQUENCE user_groups_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE user_groups_id_seq OWNER TO pi;

--
-- Name: user_groups_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: pi
--

ALTER SEQUENCE user_groups_id_seq OWNED BY user_groups.id;


--
-- Name: users; Type: TABLE; Schema: public; Owner: pi
--

CREATE TABLE users (
    id integer NOT NULL,
    "group" integer DEFAULT 3 NOT NULL,
    name character varying(255) NOT NULL,
    username character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    email character varying(255) NOT NULL,
    phone character varying(255) NOT NULL
);


ALTER TABLE users OWNER TO pi;

--
-- Name: users_id_seq; Type: SEQUENCE; Schema: public; Owner: pi
--

CREATE SEQUENCE users_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE users_id_seq OWNER TO pi;

--
-- Name: users_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: pi
--

ALTER SEQUENCE users_id_seq OWNED BY users.id;


--
-- Name: event_inventory id; Type: DEFAULT; Schema: public; Owner: pi
--

ALTER TABLE ONLY event_inventory ALTER COLUMN id SET DEFAULT nextval('event_inventory_id_seq'::regclass);


--
-- Name: events id; Type: DEFAULT; Schema: public; Owner: pi
--

ALTER TABLE ONLY events ALTER COLUMN id SET DEFAULT nextval('events_id_seq'::regclass);


--
-- Name: expense_category id; Type: DEFAULT; Schema: public; Owner: pi
--

ALTER TABLE ONLY expense_category ALTER COLUMN id SET DEFAULT nextval('expense_category_id_seq'::regclass);


--
-- Name: expenses id; Type: DEFAULT; Schema: public; Owner: pi
--

ALTER TABLE ONLY expenses ALTER COLUMN id SET DEFAULT nextval('expenses_id_seq'::regclass);


--
-- Name: inventory_type id; Type: DEFAULT; Schema: public; Owner: pi
--

ALTER TABLE ONLY inventory_type ALTER COLUMN id SET DEFAULT nextval('inventory_type_id_seq'::regclass);


--
-- Name: items id; Type: DEFAULT; Schema: public; Owner: pi
--

ALTER TABLE ONLY items ALTER COLUMN id SET DEFAULT nextval('items_id_seq'::regclass);


--
-- Name: knex_migrations id; Type: DEFAULT; Schema: public; Owner: pi
--

ALTER TABLE ONLY knex_migrations ALTER COLUMN id SET DEFAULT nextval('knex_migrations_id_seq'::regclass);


--
-- Name: user_events id; Type: DEFAULT; Schema: public; Owner: pi
--

ALTER TABLE ONLY user_events ALTER COLUMN id SET DEFAULT nextval('user_events_id_seq'::regclass);


--
-- Name: user_groups id; Type: DEFAULT; Schema: public; Owner: pi
--

ALTER TABLE ONLY user_groups ALTER COLUMN id SET DEFAULT nextval('user_groups_id_seq'::regclass);


--
-- Name: users id; Type: DEFAULT; Schema: public; Owner: pi
--

ALTER TABLE ONLY users ALTER COLUMN id SET DEFAULT nextval('users_id_seq'::regclass);


--
-- Data for Name: event_inventory; Type: TABLE DATA; Schema: public; Owner: pi
--

COPY event_inventory (id, event_id, item_id, quantity, counted) FROM stdin;
\.


--
-- Name: event_inventory_id_seq; Type: SEQUENCE SET; Schema: public; Owner: pi
--

SELECT pg_catalog.setval('event_inventory_id_seq', 30, true);


--
-- Data for Name: events; Type: TABLE DATA; Schema: public; Owner: pi
--

COPY events (id, name, recipient, address, city, state, zip, timeframe, website, sharepoint, notes, shipped, tracking, returned) FROM stdin;
\.


--
-- Name: events_id_seq; Type: SEQUENCE SET; Schema: public; Owner: pi
--

SELECT pg_catalog.setval('events_id_seq', 4, true);


--
-- Data for Name: expense_category; Type: TABLE DATA; Schema: public; Owner: pi
--

COPY expense_category (id, name) FROM stdin;
1	booth cost
2	booth accessories
3	shipping
4	lead retrieval
5	utilities
6	sponsorship
7	hotel
8	travel
9	dining
10	miscelaneous
\.


--
-- Name: expense_category_id_seq; Type: SEQUENCE SET; Schema: public; Owner: pi
--

SELECT pg_catalog.setval('expense_category_id_seq', 1, false);


--
-- Data for Name: expenses; Type: TABLE DATA; Schema: public; Owner: pi
--

COPY expenses (id, name, total, category, user_id, event_id) FROM stdin;
\.


--
-- Name: expenses_id_seq; Type: SEQUENCE SET; Schema: public; Owner: pi
--

SELECT pg_catalog.setval('expenses_id_seq', 1, false);


--
-- Data for Name: inventory_type; Type: TABLE DATA; Schema: public; Owner: pi
--

COPY inventory_type (id, label) FROM stdin;
1	swag
2	devices
3	booth_items
\.


--
-- Name: inventory_type_id_seq; Type: SEQUENCE SET; Schema: public; Owner: pi
--

SELECT pg_catalog.setval('inventory_type_id_seq', 1, false);


--
-- Data for Name: items; Type: TABLE DATA; Schema: public; Owner: pi
--

COPY items (id, inv_type, name, quantity_in, quantity_out, make, model, notes, unit_cost) FROM stdin;
3	1	Notebooks	146	0	Molekine		Black embossed with circadence logo	10.4899998
53	2	Nespresso Machine	1	0	NESPRESSO			0
8	1	Challenge Coins - Sparta Experiment	45	0	Custom Challenge coins		Custom coins for the sparta experiment. Slightly smaller 1.5"	6.32000017
11	1	Hydroflasks	6	0	Hydroflask	24oz	Stainless steel	0
14	2	Portable Monitors	3	0	Asus	15 inch	Need special usb 3.0 to hdmi to work. no power needed	180.25
15	2	Demo Laptop	4	0	Acer	Aspire	Pre loaded with demo videos and resources for Ares demos. Shouldn't be password protected	349.98999
16	1	Financial Institutions Flyer	250	0	Eight Days a Week			0.949999988
18	2	Laptop Charging cables	4	0	Acer	ADP-65VH F	Should be always sent with demo laptops.	0
19	1	4x6 Gloss Cover Postcards	250	0	Eight Days a Week			0.50999999
20	2	Wireless USB mouse	3	0	Jelly comb			9
23	2	LG 49" TV	1	0	LG	49UJ63	Haven't confirmed if this tv will attach to the stand. Will loop video	429
25	1	Foam Boards	2	0				0
22	2	All in one Video Monitor	1	0	HP/Raspberry Pi	Pi Model 3 zero / 27in monitor	HP monitor hooked up to raspberry pi to loop videos for smaller booths.	268.769989
30	2	48" Sony TV	1	0	Sony	R510 C	Will fit on tv stand and can loops videos from usb	530
31	3	TV Stand	1	0				0
32	3	TV Case	1	0				0
21	3	Nespresso	12	0				10.5
24	3	Easels	5	0		telescoping display easel, Black		0
34	3	Pelican Case	2	0	Pelican	1560	Used to ship delicate items and technology. Interior Dimensions 20.37 x 15.43 x 9.00	169.949997
35	3	Extension Cords 	6	0				0
36	3	Clear Document Holder	1	0	Docuholder		Fits 8.5x11 fliers. For displaying slicks at events	12
38	3	Plastic display stands	3	0			For displaying a single promotional flier	3.5
39	1	Flash Drive	9	0				0
42	3	39 piece tool set	1	0	Apollo Tools		Contains all basic tools and comes in a dickies tool bag.	16.6499996
41	3	Plastic Fish Bowl	1	0			For people to drop business cards in at events	3.75
40	3	Webcam Covers	164	0	C-Slide			0
43	3	Cord Hiders	4	0				0
45	1	Academic Training Flyers (Brad Wolfenden listed, Apprentice License advertised)	365	0				0
46	1	Old Orange Pens	416	0			These suck and barely work.	0
49	3	Black Duck Tape	1	0			Brand new	4
50	1	Ares Patches	475	0			Iron on patches 3" round	0
6	1	Challenge Coins - Old Logo	92	0	Challenge Coins Plus		Challenge coins with old Ares shield logo	3.3900001
12	1	Spi Shutter	235	0	C-Slide			0
51	1	2-sided Cyber Work Force Readiness Flyer's	70	0				0
48	1	Cyber Infrastructure Flier	62	0				0
54	2	All in One Monitor	1	0	R Pi & HP monitor	Pi Zero W	Monitor with raspberry pi mounted on the back to loop video within a smaller booth space. 	271
26	1	Women's T-Shirt's	62	0	Port and Company			0
27	1	Men's T-Shirts	62	0	Port and Company			0
33	1	Lanyards	22	0	AZX Sport			0
44	3	Pull Up-Banners	2	0			One Project Ares normal, one Project Ares financial specific	0
47	1	Fliers	1220	0	Old Ares Fliers	8x11		0
52	1	Is your cybersecurity team ready? (2-sided Flyer)	56	0				0
37	1	Pen's (new)	715	0				0
17	3	Tableloths	4	0				0
9	1	Fidget Spinners	499	0	Sweda USA			1
4	1	Pop Sockets	456	0	PopSocket			0
5	1	Multi Charging Cables	403	0	Promotional Supplier		splits usb into a variety of charging cables	0
1	1	Ares Stickers - Old Logo	660	0			Round Ares stickers with the old shield logo	0
10	1	Microfiber Cloths	705	0	Toddy Gear inc			0.5
7	1	Challenge Coins - New Logo	28	0	Challenge Coins Plus		Ares challenge coins with new logo	3.3900001
13	1	Power Bank	27	0		#2699		0
2	1	Ares Stickers - New Logo	406	0			Round ares stickers with new logo. There is no bleed on these ones, should take this into consideration for the next round to eliminate white border	0
\.


--
-- Name: items_id_seq; Type: SEQUENCE SET; Schema: public; Owner: pi
--

SELECT pg_catalog.setval('items_id_seq', 54, true);


--
-- Data for Name: knex_migrations; Type: TABLE DATA; Schema: public; Owner: pi
--

COPY knex_migrations (id, name, batch, migration_time) FROM stdin;
73	0_user_groups.js	1	2018-05-21 17:00:57.916+00
74	1_users.js	1	2018-05-21 17:00:58.102+00
75	2_inventory_type.js	1	2018-05-21 17:00:58.152+00
76	3_items.js	1	2018-05-21 17:00:58.27+00
77	4_events.js	1	2018-05-21 17:00:58.37+00
78	5_event_inventory.js	1	2018-05-21 17:00:58.494+00
79	6_expense_category.js	1	2018-05-21 17:00:58.568+00
80	7_expenses.js	1	2018-05-21 17:00:58.654+00
81	user_events.js	1	2018-05-21 17:00:58.789+00
\.


--
-- Name: knex_migrations_id_seq; Type: SEQUENCE SET; Schema: public; Owner: pi
--

SELECT pg_catalog.setval('knex_migrations_id_seq', 81, true);


--
-- Data for Name: knex_migrations_lock; Type: TABLE DATA; Schema: public; Owner: pi
--

COPY knex_migrations_lock (is_locked) FROM stdin;
0
\.


--
-- Data for Name: user_events; Type: TABLE DATA; Schema: public; Owner: pi
--

COPY user_events (id, user_id, event_id) FROM stdin;
\.


--
-- Name: user_events_id_seq; Type: SEQUENCE SET; Schema: public; Owner: pi
--

SELECT pg_catalog.setval('user_events_id_seq', 3, true);


--
-- Data for Name: user_groups; Type: TABLE DATA; Schema: public; Owner: pi
--

COPY user_groups (id, name) FROM stdin;
1	Admin
2	Organizer
3	Representative
\.


--
-- Name: user_groups_id_seq; Type: SEQUENCE SET; Schema: public; Owner: pi
--

SELECT pg_catalog.setval('user_groups_id_seq', 1, false);


--
-- Data for Name: users; Type: TABLE DATA; Schema: public; Owner: pi
--

COPY users (id, "group", name, username, password, email, phone) FROM stdin;
1	3	Admin	Admin	$2a$10$A7fA5Tgc4v8uopyCaW9J7ee9U9HxS0LRiyV65o3jgnC87n5U92toC	ebusse@circadence.com	3035026007
2	3	Amy Dageenakis	adageenakis@circadence.com	$2a$10$9wz1ZsQcfZ75lFywbg0zcu8SX6EMCAnVfeEP0fgBUcoReSNAGlM3K	adageenakis@circadence.com	(720) 420-4961
3	3	Kristy Butler	kbutler@circadence.com	$2a$10$9wz1ZsQcfZ75lFywbg0zcu8SX6EMCAnVfeEP0fgBUcoReSNAGlM3K	kbutler@circadence.com	(303) 413-8802
4	3	Inventory Manager	manager	$2a$10$9wz1ZsQcfZ75lFywbg0zcu8SX6EMCAnVfeEP0fgBUcoReSNAGlM3K	ebusse@circadence.com	3033333333
5	3	Josh Davis	jldavis@circadence.com	$2a$10$9wz1ZsQcfZ75lFywbg0zcu8SX6EMCAnVfeEP0fgBUcoReSNAGlM3K	jldavis@circadence.com	3033333333
6	3	Keenan Skelly	kskelly@circadence.com	$2a$10$9wz1ZsQcfZ75lFywbg0zcu8SX6EMCAnVfeEP0fgBUcoReSNAGlM3K	kskelly@circadence.com	3033333333
7	3	Brian Sheridan	bsheridan@circadence.com	$2a$10$9wz1ZsQcfZ75lFywbg0zcu8SX6EMCAnVfeEP0fgBUcoReSNAGlM3K	bsheridan@circadence.com	3033333333
8	3	Chris Voso	cvoso@circadence.com	$2a$10$9wz1ZsQcfZ75lFywbg0zcu8SX6EMCAnVfeEP0fgBUcoReSNAGlM3K	cvoso@circadence.com	3033333333
9	3	Chris Kemper	ckemper@circadence.com	$2a$10$9wz1ZsQcfZ75lFywbg0zcu8SX6EMCAnVfeEP0fgBUcoReSNAGlM3K	ckemper@circadence.com	3033333333
10	3	Tyler Rudolf	trudolph@circadence.com	$2a$10$9wz1ZsQcfZ75lFywbg0zcu8SX6EMCAnVfeEP0fgBUcoReSNAGlM3K	trudolph@circadence.com	3033333333
11	3	Josh Bussey	jbussey@circadence.com	$2a$10$9wz1ZsQcfZ75lFywbg0zcu8SX6EMCAnVfeEP0fgBUcoReSNAGlM3K	jbussey@circadence.com	3033333333
\.


--
-- Name: users_id_seq; Type: SEQUENCE SET; Schema: public; Owner: pi
--

SELECT pg_catalog.setval('users_id_seq', 2, true);


--
-- Name: event_inventory event_inventory_pkey; Type: CONSTRAINT; Schema: public; Owner: pi
--

ALTER TABLE ONLY event_inventory
    ADD CONSTRAINT event_inventory_pkey PRIMARY KEY (id);


--
-- Name: events events_pkey; Type: CONSTRAINT; Schema: public; Owner: pi
--

ALTER TABLE ONLY events
    ADD CONSTRAINT events_pkey PRIMARY KEY (id);


--
-- Name: expense_category expense_category_pkey; Type: CONSTRAINT; Schema: public; Owner: pi
--

ALTER TABLE ONLY expense_category
    ADD CONSTRAINT expense_category_pkey PRIMARY KEY (id);


--
-- Name: expenses expenses_pkey; Type: CONSTRAINT; Schema: public; Owner: pi
--

ALTER TABLE ONLY expenses
    ADD CONSTRAINT expenses_pkey PRIMARY KEY (id);


--
-- Name: inventory_type inventory_type_pkey; Type: CONSTRAINT; Schema: public; Owner: pi
--

ALTER TABLE ONLY inventory_type
    ADD CONSTRAINT inventory_type_pkey PRIMARY KEY (id);


--
-- Name: items items_pkey; Type: CONSTRAINT; Schema: public; Owner: pi
--

ALTER TABLE ONLY items
    ADD CONSTRAINT items_pkey PRIMARY KEY (id);


--
-- Name: knex_migrations knex_migrations_pkey; Type: CONSTRAINT; Schema: public; Owner: pi
--

ALTER TABLE ONLY knex_migrations
    ADD CONSTRAINT knex_migrations_pkey PRIMARY KEY (id);


--
-- Name: user_events user_events_pkey; Type: CONSTRAINT; Schema: public; Owner: pi
--

ALTER TABLE ONLY user_events
    ADD CONSTRAINT user_events_pkey PRIMARY KEY (id);


--
-- Name: user_groups user_groups_pkey; Type: CONSTRAINT; Schema: public; Owner: pi
--

ALTER TABLE ONLY user_groups
    ADD CONSTRAINT user_groups_pkey PRIMARY KEY (id);


--
-- Name: users users_pkey; Type: CONSTRAINT; Schema: public; Owner: pi
--

ALTER TABLE ONLY users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- Name: users users_username_unique; Type: CONSTRAINT; Schema: public; Owner: pi
--

ALTER TABLE ONLY users
    ADD CONSTRAINT users_username_unique UNIQUE (username);


--
-- Name: event_inventory_event_id_index; Type: INDEX; Schema: public; Owner: pi
--

CREATE INDEX event_inventory_event_id_index ON event_inventory USING btree (event_id);


--
-- Name: event_inventory_item_id_index; Type: INDEX; Schema: public; Owner: pi
--

CREATE INDEX event_inventory_item_id_index ON event_inventory USING btree (item_id);


--
-- Name: user_events_event_id_index; Type: INDEX; Schema: public; Owner: pi
--

CREATE INDEX user_events_event_id_index ON user_events USING btree (event_id);


--
-- Name: user_events_user_id_index; Type: INDEX; Schema: public; Owner: pi
--

CREATE INDEX user_events_user_id_index ON user_events USING btree (user_id);


--
-- Name: event_inventory event_inventory_event_id_foreign; Type: FK CONSTRAINT; Schema: public; Owner: pi
--

ALTER TABLE ONLY event_inventory
    ADD CONSTRAINT event_inventory_event_id_foreign FOREIGN KEY (event_id) REFERENCES events(id) ON DELETE CASCADE;


--
-- Name: event_inventory event_inventory_item_id_foreign; Type: FK CONSTRAINT; Schema: public; Owner: pi
--

ALTER TABLE ONLY event_inventory
    ADD CONSTRAINT event_inventory_item_id_foreign FOREIGN KEY (item_id) REFERENCES items(id) ON DELETE CASCADE;


--
-- Name: expenses expenses_category_foreign; Type: FK CONSTRAINT; Schema: public; Owner: pi
--

ALTER TABLE ONLY expenses
    ADD CONSTRAINT expenses_category_foreign FOREIGN KEY (category) REFERENCES expense_category(id);


--
-- Name: expenses expenses_event_id_foreign; Type: FK CONSTRAINT; Schema: public; Owner: pi
--

ALTER TABLE ONLY expenses
    ADD CONSTRAINT expenses_event_id_foreign FOREIGN KEY (event_id) REFERENCES events(id);


--
-- Name: expenses expenses_user_id_foreign; Type: FK CONSTRAINT; Schema: public; Owner: pi
--

ALTER TABLE ONLY expenses
    ADD CONSTRAINT expenses_user_id_foreign FOREIGN KEY (user_id) REFERENCES users(id);


--
-- Name: items items_inv_type_foreign; Type: FK CONSTRAINT; Schema: public; Owner: pi
--

ALTER TABLE ONLY items
    ADD CONSTRAINT items_inv_type_foreign FOREIGN KEY (inv_type) REFERENCES inventory_type(id);


--
-- Name: user_events user_events_event_id_foreign; Type: FK CONSTRAINT; Schema: public; Owner: pi
--

ALTER TABLE ONLY user_events
    ADD CONSTRAINT user_events_event_id_foreign FOREIGN KEY (event_id) REFERENCES events(id) ON DELETE CASCADE;


--
-- Name: user_events user_events_user_id_foreign; Type: FK CONSTRAINT; Schema: public; Owner: pi
--

ALTER TABLE ONLY user_events
    ADD CONSTRAINT user_events_user_id_foreign FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE;


--
-- Name: users users_group_foreign; Type: FK CONSTRAINT; Schema: public; Owner: pi
--

ALTER TABLE ONLY users
    ADD CONSTRAINT users_group_foreign FOREIGN KEY ("group") REFERENCES user_groups(id);


--
-- PostgreSQL database dump complete
--

